ODENet(
  (net_sums): Sequential(
    (activation_0): SoftsignMod()
    (linear_out): Linear(in_features=350, out_features=80, bias=True)
  )
  (net_alpha_combine): Sequential(
    (linear_out): Linear(in_features=80, out_features=350, bias=False)
  )
)


    def forward(self, t, y):
        sums = self.net_sums(y)
        #prods = torch.exp(self.net_prods(y))
        #sums_prods_concat = torch.cat((sums, prods), dim= - 1)
        #joint = self.net_alpha_combine(sums_prods_concat)
        joint = self.net_alpha_combine(sums)
        final = torch.relu(self.gene_multipliers)*(joint-y)
        return(final) 

lambda at start (first 5 epochs) = 1
and then lambda = 1
causal lottery!
doing PPI mask + T mask (but separately for sums and prods).
pruning score lambda = 0.1
Initial hit = 0.7 at epoch 2, then prune 0.1 every 10 epochs